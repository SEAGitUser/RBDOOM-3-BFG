#ifndef __RENDERPROGS_H__
#define __RENDERPROGS_H__

enum renderParm_t
{
	// For backwards compatibility, do not change the order of items

	RENDERPARM_MVPMATRIX_X,
	RENDERPARM_MVPMATRIX_Y,
	RENDERPARM_MVPMATRIX_Z,
	RENDERPARM_MVPMATRIX_W,
	
	RENDERPARM_MODELMATRIX_X,
	RENDERPARM_MODELMATRIX_Y,
	RENDERPARM_MODELMATRIX_Z,
	RENDERPARM_MODELMATRIX_W,

	RENDERPARM_MODELVIEWMATRIX_X,
	RENDERPARM_MODELVIEWMATRIX_Y,
	RENDERPARM_MODELVIEWMATRIX_Z,
	RENDERPARM_MODELVIEWMATRIX_W,

	RENDERPARM_INVERSEMODELVIEWMATRIX_X,
	RENDERPARM_INVERSEMODELVIEWMATRIX_Y,
	RENDERPARM_INVERSEMODELVIEWMATRIX_Z,
	RENDERPARM_INVERSEMODELVIEWMATRIX_W,
	
	//RENDERPARM_PROJMATRIX_X,
	//RENDERPARM_PROJMATRIX_Y,
	//RENDERPARM_PROJMATRIX_Z,
	//RENDERPARM_PROJMATRIX_W,

	RENDERPARM_AMBIENT_COLOR,

	RENDERPARM_ENABLE_SKINNING,
	RENDERPARM_ALPHA_TEST,

	RENDERPARM_SCREENCORRECTIONFACTOR,
	//RENDERPARM_WINDOWCOORD,
	RENDERPARM_OVERBRIGHT,

	RENDERPARM_GLOBALLIGHTORIGIN,

	RENDERPARM_LOCALLIGHTORIGIN,
	RENDERPARM_LOCALVIEWORIGIN,

	RENDERPARM_LIGHTPROJECTION_S,
	RENDERPARM_LIGHTPROJECTION_T,
	RENDERPARM_LIGHTPROJECTION_P,
	RENDERPARM_LIGHTPROJECTION_Q,
	RENDERPARM_LIGHTFALLOFF_S,

	RENDERPARM_BASELIGHTPROJECT_S,
	RENDERPARM_BASELIGHTPROJECT_T,
	RENDERPARM_BASELIGHTPROJECT_R,
	RENDERPARM_BASELIGHTPROJECT_Q,

	RENDERPARM_DIFFUSEMODIFIER,
	RENDERPARM_SPECULARMODIFIER,
	RENDERPARM_COLORMODIFIER,

	RENDERPARM_BUMPMATRIX_S,
	RENDERPARM_BUMPMATRIX_T,

	RENDERPARM_DIFFUSEMATRIX_S,
	RENDERPARM_DIFFUSEMATRIX_T,

	RENDERPARM_SPECULARMATRIX_S,
	RENDERPARM_SPECULARMATRIX_T,

	RENDERPARM_VERTEXCOLOR_MODULATE,
	RENDERPARM_VERTEXCOLOR_ADD,
	RENDERPARM_VERTEXCOLOR_MAD, //SEA
	RENDERPARM_COLOR,
	
	RENDERPARM_TEXTUREMATRIX_S,
	RENDERPARM_TEXTUREMATRIX_T,
	
	RENDERPARM_TEXGEN_0_S,
	RENDERPARM_TEXGEN_0_T,
	RENDERPARM_TEXGEN_0_Q,
	RENDERPARM_TEXGEN_0_ENABLED,
	
	RENDERPARM_TEXGEN_1_S,
	RENDERPARM_TEXGEN_1_T,
	RENDERPARM_TEXGEN_1_Q,
	RENDERPARM_TEXGEN_1_ENABLED,
	
	RENDERPARM_WOBBLESKY_X,
	RENDERPARM_WOBBLESKY_Y,
	RENDERPARM_WOBBLESKY_Z,

	RENDERPARM_JITTERTEXSCALE,
	RENDERPARM_JITTERTEXOFFSET,
	//RENDERPARM_CASCADEDISTANCES,
	
	//RENDERPARM_VIEWORIGIN,
	//RENDERPARM_GLOBALEYEPOS,
	
	RENDERPARM_USERVEC0,
	RENDERPARM_USERVEC1,
	RENDERPARM_USERVEC2,
	RENDERPARM_USERVEC3,
	RENDERPARM_USERVEC4,
	RENDERPARM_USERVEC5,
	RENDERPARM_USERVEC6,
	RENDERPARM_USERVEC7,
	RENDERPARM_USERVEC8,
	RENDERPARM_USERVEC9,
	RENDERPARM_USERVEC10,
	RENDERPARM_USERVEC11,
	RENDERPARM_USERVEC12,
	RENDERPARM_USERVEC13,
	RENDERPARM_USERVEC14,
	RENDERPARM_USERVEC15,
	RENDERPARM_USERVEC16,
	RENDERPARM_USERVEC17,
	RENDERPARM_USERVEC18,
	RENDERPARM_USERVEC19,
	RENDERPARM_USERVEC20,
	RENDERPARM_USERVEC21,
	RENDERPARM_USERVEC22,
	RENDERPARM_USERVEC23,
	RENDERPARM_USERVEC24,
	RENDERPARM_USERVEC25,
	RENDERPARM_USERVEC26,
	RENDERPARM_USERVEC27,
	RENDERPARM_USERVEC28,
	RENDERPARM_USERVEC29,
	RENDERPARM_USERVEC30,
	RENDERPARM_USERVEC31,

	// Textures -------------------------------------
	
	RENDERPARM_BUMPMAP,
	RENDERPARM_DIFFUSEMAP,
	RENDERPARM_SPECULARMAP,

	RENDERPARM_LIGHTPROJECTMAP,
	RENDERPARM_LIGHTFALLOFFMAP,

	RENDERPARM_MAP,
	RENDERPARM_CUBEMAP,
	RENDERPARM_ENVIROCUBEMAP,
	RENDERPARM_MASKMAP,
	RENDERPARM_COVERAGEMAP,

	RENDERPARM_MAPY,
	RENDERPARM_MAPCR,
	RENDERPARM_MAPCB,

	RENDERPARM_FOGMAP,
	RENDERPARM_FOGENTERMAP,

	RENDERPARM_NOFALLOFFMAP,
	RENDERPARM_SCRATCHIMAGE,
	RENDERPARM_SCRATCHIMAGE2,
	RENDERPARM_ACCUMMAP,

	RENDERPARM_CURRENTRENDERMAP,
	RENDERPARM_CURRENTDEPTHMAP,

	RENDERPARM_JITTERMAP,

	RENDERPARM_RANDOMIMAGE256,
	RENDERPARM_GRAINMAP,

	RENDERPARM_VIEWNORMALMAP,

	RENDERPARM_SHADOWBUFFERMAP,
	RENDERPARM_SHADOWBUFFERDEBUGMAP,

	RENDERPARM_BLOOMRENDERMAP,

	RENDERPARM_SMAAINPUTIMAGE,
	RENDERPARM_SMAAAREAIMAGE,
	RENDERPARM_SMAASEARCHIMAGE,
	RENDERPARM_SMAAEDGESIMAGE,
	RENDERPARM_SMAABLENDIMAGE,

	RENDERPARM_EDITORMAP,

	RENDERPARM_USERMAP0,
	RENDERPARM_USERMAP1,
	RENDERPARM_USERMAP2,
	RENDERPARM_USERMAP3,
	RENDERPARM_USERMAP4,
	RENDERPARM_USERMAP5,
	RENDERPARM_USERMAP6,
	RENDERPARM_USERMAP7,
	RENDERPARM_USERMAP8,
	RENDERPARM_USERMAP9,
	RENDERPARM_USERMAP10,
	RENDERPARM_USERMAP11,
	RENDERPARM_USERMAP12,
	RENDERPARM_USERMAP13,
	RENDERPARM_USERMAP14,
	RENDERPARM_USERMAP15,
	//RENDERPARM_USERMAP16,
	//RENDERPARM_USERMAP17,
	//RENDERPARM_USERMAP18,
	//RENDERPARM_USERMAP19,
	//RENDERPARM_USERMAP20,
	//RENDERPARM_USERMAP21,
	//RENDERPARM_USERMAP22,
	//RENDERPARM_USERMAP23,
	//RENDERPARM_USERMAP24,
	//RENDERPARM_USERMAP25,
	//RENDERPARM_USERMAP26,
	//RENDERPARM_USERMAP27,
	//RENDERPARM_USERMAP28,
	//RENDERPARM_USERMAP29,
	//RENDERPARM_USERMAP30,
	//RENDERPARM_USERMAP31,
	
	RENDERPARM_TOTAL,
};

/*
================================================================================================

	idRenderProgManager

================================================================================================
*/
class idRenderProgManager {
	friend class idDeclRenderProg;
public:
	idRenderProgManager();
	virtual ~idRenderProgManager();
	
	void				Init();
	void				Shutdown();
	
	idRenderVector &	GetRenderParm( renderParm_t );
	void				SetRenderParm( renderParm_t, idImage * );
	void				SetRenderParm( renderParm_t, const idRenderVector & );
	void				SetRenderParm( renderParm_t, const float * value );
	ID_INLINE void		SetRenderParms( renderParm_t rp, const float * values, int numValues ) 
	{
		for( int i = 0; i < numValues; i++ ) {
			SetRenderParm( ( renderParm_t )( rp + i ), values + ( i * 4 ) );
		}
	}
		
	// this should only be called via the reload shader console command
	void				LoadAllShaders( bool bPrint );
	void				KillAllShaders();

	///void				CommitUniforms();
	void				ZeroUniforms();
	///void				SetUniformValue( renderParm_t, const float* value );

	const idDeclRenderProg * FindRenderProgram( const char * progName ) const;
	ID_INLINE const idDeclRenderProg * GetCurrentRenderProgram() const { return mCurrentDeclRenderProg; }
	void				BindRenderProgram( const idDeclRenderProg * );
	// unbind the currently bound render program
	void				Unbind();

	// the joints buffer should only be bound for vertex programs that use joints
	ID_INLINE bool		ShaderUsesJoints() const { return GetCurrentRenderProgram()->HasHardwareSkinning(); }
	// the rpEnableSkinning render parm should only be set for vertex programs that use it
	ID_INLINE bool		ShaderHasOptionalSkinning() const { return GetCurrentRenderProgram()->HasOptionalSkinning(); }

	// Builtin programs -----------------------------------------------------
	
	void BindShader_GUI( ) {
		BindProg_Builtin( BUILTIN_GUI );
	}
	
	void BindShader_Color( const bool skinning ) {
		BindProg_Builtin( skinning ? BUILTIN_COLOR_SKINNED : BUILTIN_COLOR );
	}

	// RB begin
	void BindShader_VertexColor() {
		BindProg_Builtin( BUILTIN_VERTEX_COLOR );
	}

	void BindShader_AmbientLighting( const bool skinning ) {
		BindProg_Builtin( skinning ? BUILTIN_AMBIENT_LIGHTING_SKINNED : BUILTIN_AMBIENT_LIGHTING );
	}

	void BindShader_SmallGeometryBuffer( const bool skinning ) {
		BindProg_Builtin( skinning ? BUILTIN_SMALL_GEOMETRY_BUFFER_SKINNED : BUILTIN_SMALL_GEOMETRY_BUFFER );
	}
	// RB end

//SEA ->
	void BindShader_GBufferSml( const bool skinning ) {
		BindProg_Builtin( skinning ? BUILTIN_SMALL_GBUFFER_SML_SKINNED : BUILTIN_SMALL_GBUFFER_SML );
	}
	void BindShader_DepthWorld() {
		BindProg_Builtin( BUILTIN_DEPTH_WORLD );
	}
	void BindShader_FillShadowDepthBufferOnePass() {
		//BindProg_Builtin( BUILTIN_DEPTH_WORLD );
	}
	void BindShader_ScreenSpaceBlendLight()
	{
		BindProg_Builtin( BUILTIN_BLENDLIGHT_SCREENSPACE );
	}
//SEA <-

	void BindShader_Texture() {
		BindProg_Builtin( BUILTIN_TEXTURED );
	}

	void BindShader_TextureVertexColor( const bool skinning ) {
		BindProg_Builtin( skinning ? BUILTIN_TEXTURE_VERTEXCOLOR_SKINNED : BUILTIN_TEXTURE_VERTEXCOLOR );
	};

	void BindShader_TextureVertexColor_sRGB() {
		BindProg_Builtin( BUILTIN_TEXTURE_VERTEXCOLOR_SRGB );
	};

	void BindShader_TextureTexGenVertexColor() {
		BindProg_Builtin( BUILTIN_TEXTURE_TEXGEN_VERTEXCOLOR );
	};

	void BindShader_Interaction( const bool skinning ) {
		BindProg_Builtin( skinning ? BUILTIN_INTERACTION_SKINNED : BUILTIN_INTERACTION );
	}
	void BindShader_InteractionAmbient( const bool skinning ) {
		BindProg_Builtin( skinning ? BUILTIN_INTERACTION_AMBIENT_SKINNED : BUILTIN_INTERACTION_AMBIENT );
	}

	// RB begin
	void BindShader_Interaction_ShadowMapping_Spot( const bool skinning ) {
		BindProg_Builtin( skinning ? BUILTIN_INTERACTION_SHADOW_MAPPING_SPOT_SKINNED : BUILTIN_INTERACTION_SHADOW_MAPPING_SPOT );
	}
	void BindShader_Interaction_ShadowMapping_Point( const bool skinning ) {
		BindProg_Builtin( skinning ? BUILTIN_INTERACTION_SHADOW_MAPPING_POINT_SKINNED : BUILTIN_INTERACTION_SHADOW_MAPPING_POINT );
	}
	void BindShader_Interaction_ShadowMapping_Parallel( const bool skinning ) {
		BindProg_Builtin( skinning ? BUILTIN_INTERACTION_SHADOW_MAPPING_PARALLEL_SKINNED : BUILTIN_INTERACTION_SHADOW_MAPPING_PARALLEL );
	}
	// RB end

	void BindShader_SimpleShade() {
		BindProg_Builtin( BUILTIN_SIMPLESHADE );
	}

	void BindShader_Environment( const bool skinning ) {
		BindProg_Builtin( skinning ? BUILTIN_ENVIRONMENT_SKINNED : BUILTIN_ENVIRONMENT );
	}

	void BindShader_BumpyEnvironment( const bool skinning ) {
		BindProg_Builtin( skinning ? BUILTIN_BUMPY_ENVIRONMENT_SKINNED : BUILTIN_BUMPY_ENVIRONMENT );
	}

	void BindShader_Depth( const bool skinning ) {
		BindProg_Builtin( skinning ? BUILTIN_DEPTH_SKINNED : BUILTIN_DEPTH );
	}

	void BindShader_Shadow( const bool skinning ) {
		BindProg_Builtin( skinning ? BUILTIN_SHADOW_SKINNED : BUILTIN_SHADOW );
	}

	void BindShader_ShadowDebug( const bool skinning ) {
		BindProg_Builtin( skinning ? BUILTIN_SHADOW_DEBUG_SKINNED : BUILTIN_SHADOW_DEBUG );
	}

	void BindShader_BlendLight() {
		BindProg_Builtin( BUILTIN_BLENDLIGHT );
	}

	void BindShader_Fog( const bool skinning ) {
		BindProg_Builtin( skinning ? BUILTIN_FOG_SKINNED : BUILTIN_FOG );
	}

	void BindShader_SkyBox() {
		BindProg_Builtin( BUILTIN_SKYBOX );
	}
	
	void BindShader_WobbleSky() {
		BindProg_Builtin( BUILTIN_WOBBLESKY );
	}
	
	void BindShader_StereoDeGhost() {
		BindProg_Builtin( BUILTIN_STEREO_DEGHOST );
	}
	
	void BindShader_StereoWarp() {
		BindProg_Builtin( BUILTIN_STEREO_WARP );
	}
	
	void BindShader_StereoInterlace() {
		BindProg_Builtin( BUILTIN_STEREO_INTERLACE );
	}
	
	void BindShader_PostProcess() {
		BindProg_Builtin( BUILTIN_POSTPROCESS );
	}
	
	void BindShader_Screen() {
		BindProg_Builtin( BUILTIN_SCREEN );
	}
	
	void BindShader_Tonemap() {
		BindProg_Builtin( BUILTIN_TONEMAP );
	}
	
	void BindShader_Brightpass() {
		BindProg_Builtin( BUILTIN_BRIGHTPASS );
	}
	
	void BindShader_HDRGlareChromatic() {
		BindProg_Builtin( BUILTIN_HDR_GLARE_CHROMATIC );
	}
	
	void BindShader_HDRDebug() {
		BindProg_Builtin( BUILTIN_HDR_DEBUG );
	}
	
	void BindShader_SMAA_EdgeDetection() {
		BindProg_Builtin( BUILTIN_SMAA_EDGE_DETECTION );
	}
	
	void BindShader_SMAA_BlendingWeightCalculation() {
		BindProg_Builtin( BUILTIN_SMAA_BLENDING_WEIGHT_CALCULATION );
	}
	
	void BindShader_SMAA_NeighborhoodBlending() {
		BindProg_Builtin( BUILTIN_SMAA_NEIGHBORHOOD_BLENDING );
	}
	
	void BindShader_AmbientOcclusion() {
		BindProg_Builtin( BUILTIN_AMBIENT_OCCLUSION );
	}
	
	void BindShader_AmbientOcclusionAndOutput() {
		BindProg_Builtin( BUILTIN_AMBIENT_OCCLUSION_AND_OUTPUT );
	}
	
	void BindShader_AmbientOcclusionBlur() {
		BindProg_Builtin( BUILTIN_AMBIENT_OCCLUSION_BLUR );
	}
	
	void BindShader_AmbientOcclusionBlurAndOutput() {
		BindProg_Builtin( BUILTIN_AMBIENT_OCCLUSION_BLUR_AND_OUTPUT );
	}
	
	void BindShader_AmbientOcclusionMinify() {
		BindProg_Builtin( BUILTIN_AMBIENT_OCCLUSION_MINIFY );
	}
	
	void BindShader_AmbientOcclusionReconstructCSZ() {
		BindProg_Builtin( BUILTIN_AMBIENT_OCCLUSION_RECONSTRUCT_CSZ );
	}
	
	void BindShader_DeepGBufferRadiosity() {
		BindProg_Builtin( BUILTIN_DEEP_GBUFFER_RADIOSITY_SSGI );
	}
	
	void BindShader_DeepGBufferRadiosityBlur() {
		BindProg_Builtin( BUILTIN_DEEP_GBUFFER_RADIOSITY_BLUR );
	}
	
	void BindShader_DeepGBufferRadiosityBlurAndOutput() {
		BindProg_Builtin( BUILTIN_DEEP_GBUFFER_RADIOSITY_BLUR_AND_OUTPUT );
	}
	
#if 0
	void BindShader_ZCullReconstruct() {
		BindProg_Builtin( BUILTIN_ZCULL_RECONSTRUCT );
	}
#endif
	
	void BindShader_Bink() {
		BindProg_Builtin( BUILTIN_BINK );
	}
	
	void BindShader_BinkGUI() {
		BindProg_Builtin( BUILTIN_BINK_GUI );
	}
	
	void BindShader_MotionBlur() {
		BindProg_Builtin( BUILTIN_MOTION_BLUR );
	}
	
	void BindShader_DebugShadowMap() {
		BindProg_Builtin( BUILTIN_DEBUG_SHADOWMAP );
	}
	// RB end
	
protected:
	
	enum {
		BUILTIN_GUI,
		BUILTIN_COLOR,
		// RB begin
		BUILTIN_COLOR_SKINNED,
		BUILTIN_VERTEX_COLOR,
		BUILTIN_AMBIENT_LIGHTING,
		BUILTIN_AMBIENT_LIGHTING_SKINNED,
		BUILTIN_SMALL_GEOMETRY_BUFFER,
		BUILTIN_SMALL_GEOMETRY_BUFFER_SKINNED,
//SEA ->
		BUILTIN_SMALL_GBUFFER_SML,
		BUILTIN_SMALL_GBUFFER_SML_SKINNED,
		BUILTIN_DEPTH_WORLD,
//SEA <-
		// RB end
		BUILTIN_SIMPLESHADE,
		BUILTIN_TEXTURED,
		BUILTIN_TEXTURE_VERTEXCOLOR,
		BUILTIN_TEXTURE_VERTEXCOLOR_SRGB,
		BUILTIN_TEXTURE_VERTEXCOLOR_SKINNED,
		BUILTIN_TEXTURE_TEXGEN_VERTEXCOLOR,
		BUILTIN_INTERACTION,
		BUILTIN_INTERACTION_SKINNED,
		BUILTIN_INTERACTION_AMBIENT,
		BUILTIN_INTERACTION_AMBIENT_SKINNED,
		// RB begin
		BUILTIN_INTERACTION_SHADOW_MAPPING_SPOT,
		BUILTIN_INTERACTION_SHADOW_MAPPING_SPOT_SKINNED,
		BUILTIN_INTERACTION_SHADOW_MAPPING_POINT,
		BUILTIN_INTERACTION_SHADOW_MAPPING_POINT_SKINNED,
		BUILTIN_INTERACTION_SHADOW_MAPPING_PARALLEL,
		BUILTIN_INTERACTION_SHADOW_MAPPING_PARALLEL_SKINNED,
		// RB end
		BUILTIN_ENVIRONMENT,
		BUILTIN_ENVIRONMENT_SKINNED,
		BUILTIN_BUMPY_ENVIRONMENT,
		BUILTIN_BUMPY_ENVIRONMENT_SKINNED,
		
		BUILTIN_DEPTH,
		BUILTIN_DEPTH_SKINNED,
		BUILTIN_SHADOW,
		BUILTIN_SHADOW_SKINNED,
		BUILTIN_SHADOW_DEBUG,
		BUILTIN_SHADOW_DEBUG_SKINNED,
		
		BUILTIN_BLENDLIGHT,
		BUILTIN_BLENDLIGHT_SCREENSPACE,
		BUILTIN_FOG,
		BUILTIN_FOG_SKINNED,
		BUILTIN_SKYBOX,
		BUILTIN_WOBBLESKY,
		BUILTIN_POSTPROCESS,
		// RB begin
		BUILTIN_SCREEN,
		BUILTIN_TONEMAP,
		BUILTIN_BRIGHTPASS,
		BUILTIN_HDR_GLARE_CHROMATIC,
		BUILTIN_HDR_DEBUG,
		
		BUILTIN_SMAA_EDGE_DETECTION,
		BUILTIN_SMAA_BLENDING_WEIGHT_CALCULATION,
		BUILTIN_SMAA_NEIGHBORHOOD_BLENDING,
		
		BUILTIN_AMBIENT_OCCLUSION,
		BUILTIN_AMBIENT_OCCLUSION_AND_OUTPUT,
		BUILTIN_AMBIENT_OCCLUSION_BLUR,
		BUILTIN_AMBIENT_OCCLUSION_BLUR_AND_OUTPUT,
		BUILTIN_AMBIENT_OCCLUSION_MINIFY,
		BUILTIN_AMBIENT_OCCLUSION_RECONSTRUCT_CSZ,
		
		BUILTIN_DEEP_GBUFFER_RADIOSITY_SSGI,
		BUILTIN_DEEP_GBUFFER_RADIOSITY_BLUR,
		BUILTIN_DEEP_GBUFFER_RADIOSITY_BLUR_AND_OUTPUT,
		// RB end
		BUILTIN_STEREO_DEGHOST,
		BUILTIN_STEREO_WARP,
		BUILTIN_ZCULL_RECONSTRUCT,
		BUILTIN_BINK,
		BUILTIN_BINK_GUI,
		BUILTIN_STEREO_INTERLACE,
		BUILTIN_MOTION_BLUR,
		
		BUILTIN_DEBUG_SHADOWMAP,
		
		MAX_BUILTINS
	};
	idArray<const idDeclRenderProg *, MAX_BUILTINS> builtinProgs;
	ID_INLINE void BindProg_Builtin( int i ) 
	{
		BindRenderProgram( builtinProgs[ i ] );
	}

	idArray<const idDeclRenderParm *, RENDERPARM_TOTAL> builtinParms;

	const idDeclRenderProg * mCurrentDeclRenderProg;
};

extern idRenderProgManager renderProgManager;

#endif
